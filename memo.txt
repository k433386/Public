Array.fill(n)(readLine().trim().toInt) //入力のmasterpiece


.map(_.toInt) //与えられた関数を配列のすべての要素に対して呼び出す　+　toInt

.take(n) //最初のn個の要素からなるリストを求める
.drop(n) //最初のn個の要素を除いたリストを求める
.slice(from, to) //切り出し

.take(a) ++ .slce(a, b) ++ drop(b) //元通り

.dropRight(n) //末尾からn個除く

.combinations(n) //n個選択する組み合わせを生成する
.permutations //順列の組み合わせを生成する

.max
.min
.product
X = X.min(newX) //XとnewXで最小値

.update
.updated

.sorted //配列を昇順で並び替える
.sortBy(_(X)) //指定した列でn次元配列を並び替える
.sortBy { case (x, _, _) => x } //指定した場所でタプル入り配列を並び替える

.filter(x => X) //指定した要素で新しい配列を取得

.distinct //重複を除いた新リストを取得

.indexOf() //インデックスを取得

.mkString() //配列を文字列として結合

Integer.parseInt(String, X) //X進数を十進数に

.count(x => X) //条件を満たす要素を数える

.groupBy(x => (i, j)) //要素でグループ化

.sameElements(i) //配列を比較

.forall //与えられた条件がコレクションのすべてに成り立つか判定する

.contains //要素が存在することを確認する
.getOrElse　//存在しない場合に、デフォルトを返す

.collect //特定の要素が一致するものを取り出す

.map(_(0)) //Arrayの列切り出し

.flatMap

for (X <- Array) // 配列の要素を直接取り出す
for ((name, amount) <- result) //複数を同時に取ることもある (タプル)

Array.ofDim[]() //N次元配列の定義 val
Array.fill()() //初期値埋め val
Array.fill(N)(Array.empty[]) //配列を空の配列で満たす val
X.flatMap(_.toList) //配列の要素を一行にまとめる

var X : Array[] = Array.empty //空の配列の定義 var
var X : Map[] = Map.empty //空のマップの定義 var
Map = Map - key //キーと要素の消去

toUpper
toLower //char
toUpperCase
toLowerCase //string

.isDigit //数値であることを判定する

String.format("%10s", x).replace(" ", "0") //文字のゼロ桁埋め

string " "
char ' '

import scala.collection.mutable.Queue
    queue.dequeue()
    queue.enqueue()

import scala.collection.mutable.ArrayDeque
    ArrayDeque.append(X)
    ArrayDeque.prepend(X)
    ArrayDeque.removeLast()
    ArrayDeque.removeHead(X)

import scala.collection.mutable.ListBuffer
    ListBuffer += X //先頭
    X +=: ListBuffer //末尾
    ListBuffer.remove(0) //先頭
    ListBuffer.remove(dumbbell.length - 1) //末尾

import scala.collection.mutable.ArrayBuffer
    val X = ArrayBuffer.empty[]
    X += x
    .append

import scala.collection.mutable.Map
    Map.put(X, X)

val X: List[(Int, Int)] = (0 until H).foldLeft(List.empty[(Int, Int)]){
    (acc, i) => (0 until W).foldLeft(acc){
        (innerAcc, j) => if (Y) {(i, j) :: innerAcc} else {innerAcc}
    }
}

def withSort(x: Array[Array[Int]]): Array[Array[Int]] = {
    val tmp = x.sortWith {
        case (Array(key1, value1), Array(key2, value2)) => {
            if (key1 != key2) {
                key1 > key2
            } else {
                value1 > value2
            }
        } 
    }
    return tmp
} //sortのmasterpiece

val X: Map[String, String] = (0 until k).foldLeft(Map.empty[String, String]) { (map, _) =>
        
}
//ミュータブルなコレクションを置換し得るmasterpiece


for ((x, y) <- array1.zip(array2))
.mapと組み合わせて全要素の組に関数を当てる

.foreach(println) //全要素プリント

.trim() //入力の前後の空白をトリミングする
readLine().trim().split(" ").map(_.toInt)

.flatten //二次元配列を一次元に落とす

---注意---
classの継承用に空のメソッドを作ること
割り算はDoubleでキャストしておいたほうが吉
Int/Longを疑うこと
mapの要素はArrayにしないほうが吉
sortByを多用するよりもsortWithを関数化するほうが安定するかも
returnを明示したほうが安定するかも

foldLeftの使い方を確認すること
式が値を持つせいで関数内の順番がシビアかも
空白をトリミングしておくと吉

.containsなど走査するときはSetが速い
.existsにより関数で走査できる

要素に再代入する分にはイミュータブル
配列あるいはリスト自体を書き換えるのはミュータブル

for文やwhile文を再帰にしていくことが大切
再帰の限界はforより早い？

.zipWithIndexとfilterの組み合わせを学ぶこと

x => y //xを受け取りyを返す関数

BigIntが大きい

要素の変更は新しい構造体を定義する

パターンマッチングはifよりcaseで